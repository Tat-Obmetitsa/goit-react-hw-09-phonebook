{"version":3,"sources":["views/ContactsView/ContactsView.module.css","components/AddContact/AddContact.module.css","components/ContactList/ContactList.module.css","components/SearchFilter/SearchFilter.module.css","components/AddContact/AddContact.js","components/ContactList/ContactList.js","components/SearchFilter/SearchFilter.js","views/ContactsView/ContactsView.js"],"names":["module","exports","AddContact","useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","contactsSelectors","getAllContacts","nameInputId","shortid","generate","numberInputId","handleChangeName","useCallback","e","currentTarget","value","handleChangeNumber","reset","handleSubmit","preventDefault","find","item","toLowerCase","toast","configure","error","contactsOperations","addContact","className","s","form","onSubmit","form_label","htmlFor","form__input","type","pattern","title","onChange","id","form__button","ContactList","deleteContact","getIsLoading","filterContacts","loadingContacts","contactList","useEffect","fetchContacts","form__list","map","form__item","text","form__list_button","onClick","SearchFilter","ev","changeFilter","target","getFilter","form__label","ContactsView","container","container__title"],"mappings":"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","file":"static/js/4.4519640a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactsView_container__3p2Y7\",\"container__title\":\"ContactsView_container__title__3o5XA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"AddContact_form__2IKbm\",\"form__label\":\"AddContact_form__label__1GSgs\",\"form__input\":\"AddContact_form__input__2d75O\",\"form__button\":\"AddContact_form__button__3dF6d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__list\":\"ContactList_form__list__2rKRJ\",\"form__item\":\"ContactList_form__item__Cgpvk\",\"text\":\"ContactList_text__1Zh9r\",\"form__list_button\":\"ContactList_form__list_button__3MGLb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form__label\":\"SearchFilter_form__label__1o49G\",\"form__input\":\"SearchFilter_form__input__RzkLj\"};","import React, { useState, useCallback } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\nimport s from '../AddContact/AddContact.module.css';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n\nexport default function AddContact () {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(contactsSelectors.getAllContacts);\n\n  const nameInputId = shortid.generate();\n  const numberInputId = shortid.generate();\n\n\n  const handleChangeName =  useCallback((e) => setName(e.currentTarget.value), []);\n\n  const handleChangeNumber = useCallback((e) => setNumber(e.currentTarget.value), []);\n  \n  const reset = useCallback(() => {\n    setName('');\n    setNumber('');\n  }, []);\n\n  const handleSubmit = useCallback((e) => {\n    e.preventDefault();\n    const oldContact = contacts.find(\n      (item) => item.name.toLowerCase() === name.toLowerCase()\n    );\n    if (oldContact) {\n      toast.configure();\n      toast.error(`${name} is already in contacts`);\n      return;\n    }\n    if (name === '' || number === '') {\n      toast.configure();\n      toast.error('Add another contact name or number');\n      } else {\n       dispatch(contactsOperations.addContact({name, number}));\n      }\n    reset();\n  }, [name, number, contacts, dispatch, reset]);\n\n\n    return (\n      <form className={s.form} onSubmit={handleSubmit}>\n        <label className={s.form_label} htmlFor={nameInputId}>\n          Name\n          <input\n            className={s.form__input}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            value={name}\n            onChange={handleChangeName}\n            id={nameInputId}\n          />\n        </label>\n        <label className={s.form_label} htmlFor={numberInputId}>\n          Number\n          <input\n            className={s.form__input}\n            type=\"text\"\n            name=\"number\"\n            value={number}\n            pattern=\"(^\\+?(\\d{1,3})?[- .]?\\(?(?:\\d{2,3})\\)?[- .]?\\d\\d\\d[- .]?\\d\\d\\d\\d$)\"\n            title=\"Номер телефона должен состоять из минимум 9 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n            onChange={handleChangeNumber}\n            id={numberInputId}\n          />\n        </label>\n\n        <button type=\"submit\" className={s.form__button}>\n          Add contact\n        </button>\n      </form>\n    );\n}\nAddContact.propTypes = {\n  onSubmit: PropTypes.func\n};\n\n\n// Without hooks\n\n// import React, { Component } from \"react\";\n// import { connect } from \"react-redux\";\n// import { contactsOperations, contactsSelectors } from \"../../redux/contacts\";\n// import s from '../AddContact/AddContact.module.css';\n// import PropTypes from 'prop-types';\n// import shortid from 'shortid';\n// import { toast } from \"react-toastify\";\n// import \"react-toastify/dist/ReactToastify.css\";\n// class AddContact extends Component {\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n//   nameInputId = shortid.generate();\n//   numberInputId = shortid.generate();\n\n//   handleChange = e => {\n//     const { name, value } = e.currentTarget;\n\n//     this.setState({\n//       [name]: value,\n//     });\n//   };\n//   handleSubmit = (e) => {\n//     e.preventDefault();\n//     const { name, number} = this.state;\n//     const { contacts } = this.props;\n//     const oldContact = contacts.find(\n//       (item) => item.name.toLowerCase() === name.toLowerCase()\n//     );\n//     if (oldContact) {\n//       toast.configure();\n//       toast.error(`${name} is already in contacts`);\n//       return;\n//     }\n//     if (name === '' || number === '') {\n//       toast.configure();\n//       toast.error('Add another contact name or number');\n//       } else {\n//         this.props.onSubmit(this.state);\n//       }\n\n//     this.reset();\n//   };\n//   reset = () => {\n//     this.setState({\n//       name: '',\n//       number: '',\n//     });\n//   };\n\n\n//   render() {\n//     return (\n//       <form className={s.form} onSubmit={this.handleSubmit}>\n//         <label className={s.form_label} htmlFor={this.nameInputId}>\n//           Name\n//           <input\n//             className={s.form__input}\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             value={this.state.name}\n//             onChange={this.handleChange}\n//             id={this.nameInputId}\n//           />\n//         </label>\n//         <label className={s.form_label} htmlFor={this.numberInputId}>\n//           Number\n//           <input\n//             className={s.form__input}\n//             type=\"text\"\n//             name=\"number\"\n//             value={this.state.number}\n//             pattern=\"(^\\+?(\\d{1,3})?[- .]?\\(?(?:\\d{2,3})\\)?[- .]?\\d\\d\\d[- .]?\\d\\d\\d\\d$)\"\n//             title=\"Номер телефона должен состоять из минимум 9 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\n//             onChange={this.handleChange}\n//             id={this.numberInputId}\n//           />\n//         </label>\n\n//         <button type=\"submit\" className={s.form__button}>\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n// AddContact.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n// const mapStateToProps = (state) => ({\n//   contacts: contactsSelectors.getAllContacts(state),\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onSubmit: (contact) => dispatch(contactsOperations.addContact(contact)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(AddContact);\n","import React, {useCallback, useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport s from '../ContactList/ContactList.module.css';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport PropTypes from 'prop-types';\nexport default function ContactList () {\n  const dispatch = useDispatch();\n\n  const deleteContact = useCallback((id) => dispatch(contactsOperations.deleteContact(id)), [dispatch]);\n\n  const { getIsLoading, filterContacts } = contactsSelectors;\n  const loadingContacts = useSelector(getIsLoading);\n  const contactList = useSelector(filterContacts);\n\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch])\n\n  \n  return (\n    <>\n      {loadingContacts && <h1>Loading...</h1>}\n      <ul className={s.form__list}>\n        {contactList.map(({ id, name, number }) => (\n          <li key={id} className={s.form__item}>\n            <span className={s.text}>{name}: </span>\n           <span className={s.text}>{number}</span>\n            <button\n              type=\"button\"\n              className={s.form__list_button}\n              onClick={() => deleteContact(id)}\n            >\n              Delete contact\n            </button>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nContactList.propTypes = {\n  contactList: PropTypes.array,\n  loadingContacts: PropTypes.bool,\n  deleteContact: PropTypes.func\n};\n\n\n// Without hooks\n\n// import React, {Component} from 'react';\n// import {connect} from 'react-redux';\n// import s from '../ContactList/ContactList.module.css';\n// import { contactsOperations, contactsSelectors } from '../../redux/contacts';\n// import PropTypes from 'prop-types';\n// class ContactList extends Component {\n\n//   componentDidMount() {\n//     this.props.fetchContacts();\n//   }\n//   render() {\n//     const { contactList, deleteContact, loadingContacts } = this.props;\n//     return (\n//       <>\n//         {loadingContacts && <h1>Loading...</h1>}\n//         <ul className={s.form__list}>\n//           {contactList.map(({ id, name, number }) => (\n//             <li key={id} className={s.form__item}>\n//               <span className={s.text}>{name}: </span>\n//               <span className={s.text}>{number}</span>\n//               <button\n//                 type=\"button\"\n//                 className={s.form__list_button}\n//                 onClick={() => deleteContact(id)}\n//               >\n//                 Delete contact\n//               </button>\n//             </li>\n//           ))}\n//         </ul>\n//       </>\n//     );\n//   }\n// }\n\n// const { getIsLoading, filterContacts } = contactsSelectors;\n\n// const mapStateToProps = (state) => ({\n//   loadingContacts: getIsLoading(state),\n//   contactList: filterContacts(state),\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   deleteContact: (id) => dispatch(contactsOperations.deleteContact(id)),\n//   fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n// });\n// ContactList.propTypes = {\n//   contactList: PropTypes.array.isRequired,\n//   loadingContacts: PropTypes.bool,\n//   deleteContact: PropTypes.func.isRequired,\n// };\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React, {useCallback} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelectors, changeFilter } from '../../redux/contacts';\nimport s from './SearchFilter.module.css';\nimport PropTypes from 'prop-types';\n\n\nexport default function SearchFilter () {\n  const dispatch = useDispatch();\n  const onChange = useCallback((ev) => dispatch(changeFilter(ev.target.value)), [dispatch]);\n  const value = useSelector(contactsSelectors.getFilter);\n\n  return (\n  <label className={s.form__label}>\n    Find contacts by name\n    <input type='text' name='name' value={value} onChange={onChange} className={s.form__input} />\n  </label>\n)\n};\n\nSearchFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func\n};\n\n\n\n// Without hooks\n\n// import React from 'react';\n// import { connect } from 'react-redux';\n// import { contactsSelectors, changeFilter } from '../../redux/contacts';\n// import s from './SearchFilter.module.css';\n// import PropTypes from 'prop-types';\n\n\n// const SearchFilter = ({ value, onChange }) => (\n//   <label className={s.form__label}>\n//     Find contacts by name\n//     <input type='text' name='name' value={value} onChange={onChange} className={s.form__input} />\n//   </label>\n// );\n\n// SearchFilter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n\n// const mapStateToProps = (state) => ({\n//   value: contactsSelectors.getFilter(state),\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   onChange: (ev) => dispatch(changeFilter(ev.target.value)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(SearchFilter);\n","import React from 'react';\r\nimport s from '../ContactsView/ContactsView.module.css';\r\nimport AddContact from '../../components/AddContact/AddContact';\r\nimport ContactList from '../../components/ContactList/ContactList'\r\nimport SearchFilter from '../../components/SearchFilter/SearchFilter';\r\n\r\nconst ContactsView = () => (\r\n  <div className={s.container}>\r\n  <h1 className={s.container__title}>Phonebook</h1>\r\n  <AddContact />\r\n  <h2 className={s.container__title}>Contacts</h2>\r\n  <SearchFilter  />\r\n  <ContactList />\r\n</div>\r\n);\r\n\r\nexport default ContactsView;\r\n"],"sourceRoot":""}
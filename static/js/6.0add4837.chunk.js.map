{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","views/LoginView/LoginView.module.css","views/LoginView/LoginView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","LoginView","useState","email","setEmail","password","setPassword","dispatch","useDispatch","handleChange","target","name","console","warn","className","s","form__title","onSubmit","e","preventDefault","authOperations","logIn","autoComplete","form","form__label","type","pattern","onChange","form__input","form__button"],"mappings":"8LAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,oBIJtGC,EAAOC,QAAU,CAAC,KAAO,wBAAwB,YAAc,+BAA+B,YAAc,+BAA+B,YAAc,+BAA+B,aAAe,kC,6ICIxL,SAASC,IAAa,IAAD,EACRC,mBAAS,IADD,mBAC3BC,EAD2B,KACpBC,EADoB,OAEFF,mBAAS,IAFP,mBAE3BG,EAF2B,KAEjBC,EAFiB,KAI5BC,EAAWC,cAEXC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMjB,EAAc,EAAdA,MACtC,OAAQiB,GACL,IAAK,QACH,OAAOP,EAASV,GAClB,IAAK,WACH,OAAOY,EAAYZ,GACrB,QACE,YADQkB,QAAQC,KAAR,iBAAuBF,EAAvB,yBAWb,OACE,gCACE,oBAAIG,UAAWC,IAAEC,YAAjB,2BACA,uBACEC,SAVa,SAAAC,GACnBA,EAAEC,iBACFZ,EAASa,IAAeC,MAAM,CAAClB,QAAOE,cACtCD,EAAS,IACTE,EAAY,KAONgB,aAAa,MACbR,UAAWC,IAAEQ,KAHf,UAKE,wBAAOT,UAAWC,IAAES,YAApB,kBAEE,uBACEC,KAAK,QACLd,KAAK,QACLe,QAAQ,8BACRhC,MAAOS,EACPwB,SAAUlB,EACVK,UAAWC,IAAEa,iBAIjB,wBAAOd,UAAWC,IAAES,YAApB,qBAEE,uBACEC,KAAK,WACLd,KAAK,WACLjB,MAAOW,EACPsB,SAAUlB,EACVK,UAAWC,IAAEa,iBAIjB,wBAAQH,KAAK,SAASX,UAAWC,IAAEc,aAAnC","file":"static/js/6.0add4837.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"LoginView_form__2rlqe\",\"form__title\":\"LoginView_form__title__3w7QN\",\"form__label\":\"LoginView_form__label__3YL0a\",\"form__input\":\"LoginView_form__input__2MV-v\",\"form__button\":\"LoginView_form__button__2UacD\"};","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { authOperations } from '../../redux/auth';\r\nimport s from './LoginView.module.css';\r\n\r\nexport default function LoginView() {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const dispatch = useDispatch();\r\n  \r\n  const handleChange = ({ target: { name, value } }) => {\r\n    switch (name) {\r\n       case 'email':\r\n         return setEmail(value);\r\n       case 'password':\r\n         return setPassword(value);\r\n       default:  console.warn(`Option ${name} is not processed!`);\r\n         return;\r\n     }\r\n   };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch(authOperations.logIn({email, password}));\r\n    setEmail('');\r\n    setPassword('');\r\n  };\r\n    return (\r\n      <div>\r\n        <h1 className={s.form__title}>Authorization</h1>\r\n        <form\r\n          onSubmit={handleSubmit}\r\n          autoComplete=\"off\"\r\n          className={s.form}\r\n        >\r\n          <label className={s.form__label}>\r\n            Email\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              pattern=\"[^@]+@[^@]+\\.[a-zA-Z]{2,6}\"\r\n              value={email}\r\n              onChange={handleChange}\r\n              className={s.form__input}\r\n            />\r\n          </label>\r\n\r\n          <label className={s.form__label}>\r\n            Password\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={handleChange}\r\n              className={s.form__input}\r\n            />\r\n          </label>\r\n\r\n          <button type=\"submit\" className={s.form__button}>Log in</button>\r\n        </form>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n// Without hooks\r\n\r\n// import React, { Component } from 'react';\r\n// import { connect } from 'react-redux';\r\n// import { authOperations } from '../../redux/auth';\r\n// import s from './LoginView.module.css';\r\n\r\n// class LoginView extends Component {\r\n//   state = {\r\n//     email: '',\r\n//     password: '',\r\n//   };\r\n\r\n//   handleChange = ({ target: { name, value } }) => {\r\n//     this.setState({ [name]: value });\r\n//   };\r\n\r\n//   handleSubmit = e => {\r\n//     e.preventDefault();\r\n\r\n//     this.props.onLogin(this.state);\r\n\r\n//     this.setState({ name: '', email: '', password: '' });\r\n//   };\r\n\r\n//   render() {\r\n//     const { email, password } = this.state;\r\n\r\n//     return (\r\n//       <div>\r\n//         <h1 className={s.form__title}>Authorization</h1>\r\n//         <form\r\n//           onSubmit={this.handleSubmit}\r\n//           autoComplete=\"off\"\r\n//           className={s.form}\r\n//         >\r\n//           <label className={s.form__label}>\r\n//             Email\r\n//             <input\r\n//               type=\"email\"\r\n//               name=\"email\"\r\n//               pattern=\"[^@]+@[^@]+\\.[a-zA-Z]{2,6}\"\r\n//               value={email}\r\n//               onChange={this.handleChange}\r\n//               className={s.form__input}\r\n//             />\r\n//           </label>\r\n\r\n//           <label className={s.form__label}>\r\n//             Password\r\n//             <input\r\n//               type=\"password\"\r\n//               name=\"password\"\r\n//               value={password}\r\n//               onChange={this.handleChange}\r\n//               className={s.form__input}\r\n//             />\r\n//           </label>\r\n\r\n//           <button type=\"submit\" className={s.form__button}>Log in</button>\r\n//         </form>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapDispatchToProps = {\r\n//   onLogin: authOperations.logIn,\r\n// };\r\n\r\n// export default connect(null, mapDispatchToProps)(LoginView);"],"sourceRoot":""}